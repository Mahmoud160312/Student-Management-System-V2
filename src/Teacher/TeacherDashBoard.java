/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Teacher;

import java.awt.Cursor;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import static newatomicstudent.functions.*;

/**
 *
 * @author mahmo
 */
public class TeacherDashBoard extends javax.swing.JFrame {

    // general_connection with the database
    Connection con;
    // this is important variable used when print the table check that the table have been search about it
    int printDeterminationTable = -1;

    /**
     * Creates new form StudentManagement
     */
    public TeacherDashBoard() {
        initComponents();
        setIcon();
        con = general_connection();
        // view only attendance report panel

        pl_generalDashboard.setVisible(true);
        pl_theBest.setVisible(false);

        hoverInMouseClicked(btn_generalDashboard);
        defaultAfterHover(btn_bestStudentStatics);

        // quiz report panel
        loadLevel(cb_level1);

        //money report panel
        loadLevel(cb_level3);

        rb_all.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        sp_reports = new javax.swing.JScrollPane();
        pl_background = new javax.swing.JPanel();
        pl_topButtonControl = new javax.swing.JPanel();
        lp_empty1 = new javax.swing.JLabel();
        lp_empty2 = new javax.swing.JLabel();
        lp_empty3 = new javax.swing.JLabel();
        btn_bestStudentStatics = new javax.swing.JButton();
        btn_generalDashboard = new javax.swing.JButton();
        reports = new javax.swing.JLayeredPane();
        pl_generalDashboard = new javax.swing.JPanel();
        pl_level = new javax.swing.JPanel();
        cb_level3 = new javax.swing.JComboBox<>();
        lb_levelName4 = new javax.swing.JLabel();
        pl_leftData = new javax.swing.JPanel();
        lb_quizValue = new javax.swing.JLabel();
        lb_quiz = new javax.swing.JLabel();
        lb_examValue = new javax.swing.JLabel();
        lb_exam = new javax.swing.JLabel();
        pl_rightData = new javax.swing.JPanel();
        lb_studentValue = new javax.swing.JLabel();
        lb_student = new javax.swing.JLabel();
        lb_classValue = new javax.swing.JLabel();
        lb_class = new javax.swing.JLabel();
        lb_groupValue = new javax.swing.JLabel();
        lb_group = new javax.swing.JLabel();
        pl_theBest = new javax.swing.JPanel();
        pl_seperateLine2 = new javax.swing.JPanel();
        lb_star15 = new javax.swing.JLabel();
        sp_bestStudentStaticsReport = new javax.swing.JScrollPane();
        t_bestStudentStaticsReport = new javax.swing.JTable();
        pl_levelName = new javax.swing.JPanel();
        cb_level1 = new javax.swing.JComboBox<>();
        lb_levelName2 = new javax.swing.JLabel();
        lb_endDate1 = new javax.swing.JLabel();
        dc_endDate1 = new com.toedter.calendar.JDateChooser();
        dc_startDate1 = new com.toedter.calendar.JDateChooser();
        lb_startDate1 = new javax.swing.JLabel();
        pl_verticalSeperatePanel1 = new javax.swing.JPanel();
        btn_viewStudentStaticsReport = new javax.swing.JButton();
        lb_chooseDate1 = new javax.swing.JLabel();
        btn_printStudentStaticsReport = new javax.swing.JButton();
        pl_classes = new javax.swing.JPanel();
        rb_attendance = new javax.swing.JRadioButton();
        rb_quiz = new javax.swing.JRadioButton();
        rb_exam = new javax.swing.JRadioButton();
        rb_all = new javax.swing.JRadioButton();
        pl_totalValues = new javax.swing.JPanel();
        lb_apsenceNumber1 = new javax.swing.JLabel();
        lb_attendanceNumber1 = new javax.swing.JLabel();
        lb_total1 = new javax.swing.JLabel();
        tf_exam_number = new javax.swing.JTextField();
        tf_quiz_number = new javax.swing.JTextField();
        tf_class_number = new javax.swing.JTextField();
        pl_bottomButtonCotrol = new javax.swing.JPanel();
        lb_empty3 = new javax.swing.JLabel();
        lb_empty4 = new javax.swing.JLabel();
        lb_empty5 = new javax.swing.JLabel();
        btn_home = new javax.swing.JButton();
        btn_Setting = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pl_background.setBackground(new java.awt.Color(255, 255, 255));
        pl_background.setMinimumSize(new java.awt.Dimension(1205, 650));

        pl_topButtonControl.setBackground(new java.awt.Color(19, 64, 93));
        pl_topButtonControl.setMinimumSize(new java.awt.Dimension(1205, 60));
        pl_topButtonControl.setPreferredSize(new java.awt.Dimension(1205, 60));
        pl_topButtonControl.setLayout(new java.awt.GridLayout(1, 0, 10, 10));
        pl_topButtonControl.add(lp_empty1);
        pl_topButtonControl.add(lp_empty2);
        pl_topButtonControl.add(lp_empty3);

        btn_bestStudentStatics.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        btn_bestStudentStatics.setForeground(new java.awt.Color(255, 255, 255));
        btn_bestStudentStatics.setText("احصائيات الطلاب");
        btn_bestStudentStatics.setContentAreaFilled(false);
        btn_bestStudentStatics.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_bestStudentStaticsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_bestStudentStaticsMouseExited(evt);
            }
        });
        btn_bestStudentStatics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_bestStudentStaticsActionPerformed(evt);
            }
        });
        pl_topButtonControl.add(btn_bestStudentStatics);

        btn_generalDashboard.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        btn_generalDashboard.setForeground(new java.awt.Color(255, 255, 255));
        btn_generalDashboard.setText("احصائيات عامه");
        btn_generalDashboard.setContentAreaFilled(false);
        btn_generalDashboard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_generalDashboardMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_generalDashboardMouseExited(evt);
            }
        });
        btn_generalDashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_generalDashboardActionPerformed(evt);
            }
        });
        pl_topButtonControl.add(btn_generalDashboard);

        reports.setPreferredSize(new java.awt.Dimension(1205, 553));
        reports.setLayout(new java.awt.CardLayout());

        pl_generalDashboard.setBackground(new java.awt.Color(255, 255, 255));

        pl_level.setBackground(new java.awt.Color(255, 255, 255));
        pl_level.setLayout(new java.awt.GridLayout(1, 0, 10, 20));

        cb_level3.setFont(new java.awt.Font("Cairo", 1, 14)); // NOI18N
        cb_level3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "اختر الفرقة" }));
        cb_level3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 155, 255), 1, true));
        cb_level3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_level3ItemStateChanged(evt);
            }
        });
        cb_level3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cb_level3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                cb_level3FocusLost(evt);
            }
        });
        cb_level3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_level3ActionPerformed(evt);
            }
        });
        pl_level.add(cb_level3);

        lb_levelName4.setBackground(new java.awt.Color(255, 255, 255));
        lb_levelName4.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        lb_levelName4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_levelName4.setText("اختر الفرقة");
        pl_level.add(lb_levelName4);

        pl_leftData.setBackground(new java.awt.Color(255, 255, 255));
        pl_leftData.setLayout(new java.awt.GridLayout(3, 0, 40, 30));

        lb_quizValue.setBackground(new java.awt.Color(255, 255, 255));
        lb_quizValue.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        lb_quizValue.setForeground(new java.awt.Color(19, 64, 93));
        lb_quizValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_quizValue.setText("0");
        pl_leftData.add(lb_quizValue);

        lb_quiz.setBackground(new java.awt.Color(255, 255, 255));
        lb_quiz.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        lb_quiz.setForeground(new java.awt.Color(102, 102, 102));
        lb_quiz.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_quiz.setText("عدد التسميعات:");
        pl_leftData.add(lb_quiz);

        lb_examValue.setBackground(new java.awt.Color(255, 255, 255));
        lb_examValue.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        lb_examValue.setForeground(new java.awt.Color(19, 64, 93));
        lb_examValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_examValue.setText("0");
        pl_leftData.add(lb_examValue);

        lb_exam.setBackground(new java.awt.Color(255, 255, 255));
        lb_exam.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        lb_exam.setForeground(new java.awt.Color(102, 102, 102));
        lb_exam.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_exam.setText("عدد الامتحانات:");
        pl_leftData.add(lb_exam);

        pl_rightData.setBackground(new java.awt.Color(255, 255, 255));
        pl_rightData.setLayout(new java.awt.GridLayout(3, 0, 40, 30));

        lb_studentValue.setBackground(new java.awt.Color(255, 255, 255));
        lb_studentValue.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        lb_studentValue.setForeground(new java.awt.Color(19, 64, 93));
        lb_studentValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_studentValue.setText("0");
        pl_rightData.add(lb_studentValue);

        lb_student.setBackground(new java.awt.Color(255, 255, 255));
        lb_student.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        lb_student.setForeground(new java.awt.Color(102, 102, 102));
        lb_student.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_student.setText("عدد الطلاب:");
        pl_rightData.add(lb_student);

        lb_classValue.setBackground(new java.awt.Color(255, 255, 255));
        lb_classValue.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        lb_classValue.setForeground(new java.awt.Color(19, 64, 93));
        lb_classValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_classValue.setText("0");
        pl_rightData.add(lb_classValue);

        lb_class.setBackground(new java.awt.Color(255, 255, 255));
        lb_class.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        lb_class.setForeground(new java.awt.Color(102, 102, 102));
        lb_class.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_class.setText("عدد الحصص:");
        pl_rightData.add(lb_class);

        lb_groupValue.setBackground(new java.awt.Color(255, 255, 255));
        lb_groupValue.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        lb_groupValue.setForeground(new java.awt.Color(19, 64, 93));
        lb_groupValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_groupValue.setText("0");
        pl_rightData.add(lb_groupValue);

        lb_group.setBackground(new java.awt.Color(255, 255, 255));
        lb_group.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        lb_group.setForeground(new java.awt.Color(102, 102, 102));
        lb_group.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_group.setText("عدد المجموعات: ");
        pl_rightData.add(lb_group);

        javax.swing.GroupLayout pl_generalDashboardLayout = new javax.swing.GroupLayout(pl_generalDashboard);
        pl_generalDashboard.setLayout(pl_generalDashboardLayout);
        pl_generalDashboardLayout.setHorizontalGroup(
            pl_generalDashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pl_generalDashboardLayout.createSequentialGroup()
                .addGap(229, 229, 229)
                .addComponent(pl_leftData, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                .addGap(177, 177, 177)
                .addComponent(pl_rightData, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                .addGap(180, 180, 180))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pl_generalDashboardLayout.createSequentialGroup()
                .addGap(485, 485, 485)
                .addComponent(pl_level, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(411, 411, 411))
        );
        pl_generalDashboardLayout.setVerticalGroup(
            pl_generalDashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pl_generalDashboardLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(pl_level, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(pl_generalDashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pl_rightData, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addComponent(pl_leftData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(141, 141, 141))
        );

        reports.add(pl_generalDashboard, "card2");

        pl_theBest.setBackground(new java.awt.Color(255, 255, 255));

        pl_seperateLine2.setBackground(new java.awt.Color(153, 153, 153));
        pl_seperateLine2.setPreferredSize(new java.awt.Dimension(600, 2));

        javax.swing.GroupLayout pl_seperateLine2Layout = new javax.swing.GroupLayout(pl_seperateLine2);
        pl_seperateLine2.setLayout(pl_seperateLine2Layout);
        pl_seperateLine2Layout.setHorizontalGroup(
            pl_seperateLine2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        pl_seperateLine2Layout.setVerticalGroup(
            pl_seperateLine2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        lb_star15.setBackground(new java.awt.Color(255, 255, 255));
        lb_star15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lb_star15.setForeground(new java.awt.Color(255, 0, 0));
        lb_star15.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lb_star15.setText("*");

        t_bestStudentStaticsReport.setFont(new java.awt.Font("Cairo", 1, 14)); // NOI18N
        t_bestStudentStaticsReport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        t_bestStudentStaticsReport.setRowHeight(30);
        t_bestStudentStaticsReport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                t_bestStudentStaticsReportMouseClicked(evt);
            }
        });
        sp_bestStudentStaticsReport.setViewportView(t_bestStudentStaticsReport);

        pl_levelName.setBackground(new java.awt.Color(255, 255, 255));
        pl_levelName.setLayout(new java.awt.GridLayout(1, 0, 10, 20));

        cb_level1.setFont(new java.awt.Font("Cairo", 1, 14)); // NOI18N
        cb_level1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "اختر الفرقة" }));
        cb_level1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 155, 255), 1, true));
        cb_level1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_level1ItemStateChanged(evt);
            }
        });
        cb_level1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cb_level1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                cb_level1FocusLost(evt);
            }
        });
        pl_levelName.add(cb_level1);

        lb_levelName2.setBackground(new java.awt.Color(255, 255, 255));
        lb_levelName2.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        lb_levelName2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_levelName2.setText("الفرقة");
        pl_levelName.add(lb_levelName2);

        lb_endDate1.setBackground(new java.awt.Color(255, 255, 255));
        lb_endDate1.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        lb_endDate1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_endDate1.setText("الي");

        dc_endDate1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 155, 255), 2, true));
        dc_endDate1.setDateFormatString("yyyy-MM-dd");
        dc_endDate1.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        dc_endDate1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dc_endDate1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                dc_endDate1FocusLost(evt);
            }
        });

        dc_startDate1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 155, 255), 2, true));
        dc_startDate1.setDateFormatString("yyyy-MM-dd");
        dc_startDate1.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        dc_startDate1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dc_startDate1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                dc_startDate1FocusLost(evt);
            }
        });

        lb_startDate1.setBackground(new java.awt.Color(255, 255, 255));
        lb_startDate1.setFont(new java.awt.Font("Cairo", 1, 17)); // NOI18N
        lb_startDate1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_startDate1.setText("من");

        pl_verticalSeperatePanel1.setBackground(new java.awt.Color(153, 153, 153));

        javax.swing.GroupLayout pl_verticalSeperatePanel1Layout = new javax.swing.GroupLayout(pl_verticalSeperatePanel1);
        pl_verticalSeperatePanel1.setLayout(pl_verticalSeperatePanel1Layout);
        pl_verticalSeperatePanel1Layout.setHorizontalGroup(
            pl_verticalSeperatePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );
        pl_verticalSeperatePanel1Layout.setVerticalGroup(
            pl_verticalSeperatePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        btn_viewStudentStaticsReport.setBackground(new java.awt.Color(19, 64, 93));
        btn_viewStudentStaticsReport.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        btn_viewStudentStaticsReport.setForeground(new java.awt.Color(255, 255, 255));
        btn_viewStudentStaticsReport.setText("عرض");
        btn_viewStudentStaticsReport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_viewStudentStaticsReportMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_viewStudentStaticsReportMouseExited(evt);
            }
        });
        btn_viewStudentStaticsReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_viewStudentStaticsReportActionPerformed(evt);
            }
        });

        lb_chooseDate1.setBackground(new java.awt.Color(255, 255, 255));
        lb_chooseDate1.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        lb_chooseDate1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_chooseDate1.setText("اختر الفترة");

        btn_printStudentStaticsReport.setBackground(new java.awt.Color(0, 155, 255));
        btn_printStudentStaticsReport.setFont(new java.awt.Font("Cairo", 1, 14)); // NOI18N
        btn_printStudentStaticsReport.setForeground(new java.awt.Color(255, 255, 255));
        btn_printStudentStaticsReport.setText("طباعة");
        btn_printStudentStaticsReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_printStudentStaticsReportActionPerformed(evt);
            }
        });

        pl_classes.setBackground(new java.awt.Color(255, 255, 255));
        pl_classes.setLayout(new java.awt.GridLayout(4, 0, 0, 20));

        rb_attendance.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rb_attendance);
        rb_attendance.setFont(new java.awt.Font("Cairo", 1, 14)); // NOI18N
        rb_attendance.setForeground(new java.awt.Color(0, 155, 255));
        rb_attendance.setText("غياب و حضور");
        rb_attendance.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 155, 255), 2, true));
        rb_attendance.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        rb_attendance.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        rb_attendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_attendanceActionPerformed(evt);
            }
        });
        pl_classes.add(rb_attendance);

        rb_quiz.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rb_quiz);
        rb_quiz.setFont(new java.awt.Font("Cairo", 1, 14)); // NOI18N
        rb_quiz.setForeground(new java.awt.Color(0, 155, 255));
        rb_quiz.setText("تسميعات");
        rb_quiz.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 155, 255), 2, true));
        rb_quiz.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        rb_quiz.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        rb_quiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_quizActionPerformed(evt);
            }
        });
        pl_classes.add(rb_quiz);

        rb_exam.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rb_exam);
        rb_exam.setFont(new java.awt.Font("Cairo", 1, 14)); // NOI18N
        rb_exam.setForeground(new java.awt.Color(0, 155, 255));
        rb_exam.setText("امتحانات");
        rb_exam.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 155, 255), 2, true));
        rb_exam.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        rb_exam.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        rb_exam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_examActionPerformed(evt);
            }
        });
        pl_classes.add(rb_exam);

        rb_all.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rb_all);
        rb_all.setFont(new java.awt.Font("Cairo", 1, 14)); // NOI18N
        rb_all.setForeground(new java.awt.Color(0, 155, 255));
        rb_all.setText("الكل");
        rb_all.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 155, 255), 2, true));
        rb_all.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        rb_all.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        rb_all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_allActionPerformed(evt);
            }
        });
        pl_classes.add(rb_all);

        pl_totalValues.setBackground(new java.awt.Color(255, 255, 255));
        pl_totalValues.setPreferredSize(new java.awt.Dimension(650, 88));
        pl_totalValues.setLayout(new java.awt.GridLayout(2, 0, 10, 10));

        lb_apsenceNumber1.setBackground(new java.awt.Color(255, 255, 255));
        lb_apsenceNumber1.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        lb_apsenceNumber1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_apsenceNumber1.setText("الدرجات الكلية للامتحانات");
        pl_totalValues.add(lb_apsenceNumber1);

        lb_attendanceNumber1.setBackground(new java.awt.Color(255, 255, 255));
        lb_attendanceNumber1.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        lb_attendanceNumber1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_attendanceNumber1.setText("الدرجات الكلية للتسميعات");
        pl_totalValues.add(lb_attendanceNumber1);

        lb_total1.setBackground(new java.awt.Color(255, 255, 255));
        lb_total1.setFont(new java.awt.Font("Cairo", 1, 17)); // NOI18N
        lb_total1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_total1.setText("عدد الحصص المضافة");
        pl_totalValues.add(lb_total1);

        tf_exam_number.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        tf_exam_number.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tf_exam_number.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 155, 255), 2, true));
        tf_exam_number.setDisabledTextColor(new java.awt.Color(234, 84, 51));
        tf_exam_number.setEnabled(false);
        pl_totalValues.add(tf_exam_number);

        tf_quiz_number.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        tf_quiz_number.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tf_quiz_number.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 155, 255), 2, true));
        tf_quiz_number.setDisabledTextColor(new java.awt.Color(234, 84, 51));
        tf_quiz_number.setEnabled(false);
        pl_totalValues.add(tf_quiz_number);

        tf_class_number.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        tf_class_number.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tf_class_number.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 155, 255), 2, true));
        tf_class_number.setDisabledTextColor(new java.awt.Color(234, 84, 51));
        tf_class_number.setEnabled(false);
        pl_totalValues.add(tf_class_number);

        javax.swing.GroupLayout pl_theBestLayout = new javax.swing.GroupLayout(pl_theBest);
        pl_theBest.setLayout(pl_theBestLayout);
        pl_theBestLayout.setHorizontalGroup(
            pl_theBestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pl_theBestLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pl_theBestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pl_theBestLayout.createSequentialGroup()
                        .addComponent(btn_printStudentStaticsReport)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(sp_bestStudentStaticsReport, javax.swing.GroupLayout.DEFAULT_SIZE, 915, Short.MAX_VALUE)
                    .addComponent(pl_totalValues, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pl_verticalSeperatePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pl_theBestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pl_theBestLayout.createSequentialGroup()
                        .addComponent(pl_seperateLine2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pl_theBestLayout.createSequentialGroup()
                        .addComponent(lb_chooseDate1)
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pl_theBestLayout.createSequentialGroup()
                        .addComponent(btn_viewStudentStaticsReport, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(114, 114, 114))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pl_theBestLayout.createSequentialGroup()
                        .addComponent(lb_star15)
                        .addGap(0, 0, 0)
                        .addGroup(pl_theBestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pl_theBestLayout.createSequentialGroup()
                                .addComponent(pl_levelName, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                                .addGap(21, 21, 21))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pl_theBestLayout.createSequentialGroup()
                                .addGroup(pl_theBestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(pl_classes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pl_theBestLayout.createSequentialGroup()
                                        .addGroup(pl_theBestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(dc_startDate1, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                                            .addComponent(dc_endDate1, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(pl_theBestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lb_endDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lb_startDate1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(28, 28, 28))))))
        );
        pl_theBestLayout.setVerticalGroup(
            pl_theBestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pl_theBestLayout.createSequentialGroup()
                .addGroup(pl_theBestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pl_theBestLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(pl_theBestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pl_verticalSeperatePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pl_theBestLayout.createSequentialGroup()
                                .addGroup(pl_theBestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lb_star15)
                                    .addComponent(pl_levelName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(lb_chooseDate1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pl_theBestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lb_startDate1)
                                    .addComponent(dc_startDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(pl_theBestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lb_endDate1)
                                    .addComponent(dc_endDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(14, 14, 14)
                                .addComponent(pl_seperateLine2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pl_classes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_viewStudentStaticsReport)
                                .addGap(0, 73, Short.MAX_VALUE))))
                    .addGroup(pl_theBestLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(pl_totalValues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(sp_bestStudentStaticsReport, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(btn_printStudentStaticsReport)))
                .addGap(0, 0, 0))
        );

        reports.add(pl_theBest, "card2");

        pl_bottomButtonCotrol.setBackground(new java.awt.Color(19, 64, 93));
        pl_bottomButtonCotrol.setMinimumSize(new java.awt.Dimension(1205, 60));
        pl_bottomButtonCotrol.setPreferredSize(new java.awt.Dimension(1205, 60));
        pl_bottomButtonCotrol.setLayout(new java.awt.GridLayout(1, 0, 40, 0));
        pl_bottomButtonCotrol.add(lb_empty3);
        pl_bottomButtonCotrol.add(lb_empty4);
        pl_bottomButtonCotrol.add(lb_empty5);

        btn_home.setBackground(new java.awt.Color(19, 64, 93));
        btn_home.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        btn_home.setForeground(new java.awt.Color(255, 255, 255));
        btn_home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Photos/home-btn.png"))); // NOI18N
        btn_home.setText("الرئيسية");
        btn_home.setContentAreaFilled(false);
        btn_home.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btn_home.setIconTextGap(16);
        btn_home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_homeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_homeMouseExited(evt);
            }
        });
        btn_home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_homeActionPerformed(evt);
            }
        });
        pl_bottomButtonCotrol.add(btn_home);

        btn_Setting.setBackground(new java.awt.Color(19, 64, 93));
        btn_Setting.setFont(new java.awt.Font("Cairo", 1, 18)); // NOI18N
        btn_Setting.setForeground(new java.awt.Color(255, 255, 255));
        btn_Setting.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Photos/Settings.png"))); // NOI18N
        btn_Setting.setText("الاعدادات");
        btn_Setting.setContentAreaFilled(false);
        btn_Setting.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btn_Setting.setIconTextGap(16);
        btn_Setting.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_SettingMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_SettingMouseExited(evt);
            }
        });
        btn_Setting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SettingActionPerformed(evt);
            }
        });
        pl_bottomButtonCotrol.add(btn_Setting);

        javax.swing.GroupLayout pl_backgroundLayout = new javax.swing.GroupLayout(pl_background);
        pl_background.setLayout(pl_backgroundLayout);
        pl_backgroundLayout.setHorizontalGroup(
            pl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pl_backgroundLayout.createSequentialGroup()
                .addGroup(pl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pl_topButtonControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pl_bottomButtonCotrol, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
            .addGroup(pl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(reports, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1343, Short.MAX_VALUE))
        );
        pl_backgroundLayout.setVerticalGroup(
            pl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pl_backgroundLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(pl_topButtonControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 573, Short.MAX_VALUE)
                .addComponent(pl_bottomButtonCotrol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
            .addGroup(pl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pl_backgroundLayout.createSequentialGroup()
                    .addGap(65, 65, 65)
                    .addComponent(reports, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(80, Short.MAX_VALUE)))
        );

        sp_reports.setViewportView(pl_background);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sp_reports, javax.swing.GroupLayout.DEFAULT_SIZE, 1240, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sp_reports)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // this function will clean after update,delete or clean after search for student
    public void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource(returnYourImageURL())));
    }


    private void btn_SettingMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_SettingMouseEntered
        hoverInMouseMotion(btn_Setting);
    }//GEN-LAST:event_btn_SettingMouseEntered

    private void btn_SettingMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_SettingMouseExited
        defaultAfterHover(btn_Setting);
    }//GEN-LAST:event_btn_SettingMouseExited

    private void btn_SettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SettingActionPerformed
        this.setVisible(false);
        TeacherSettings teacherSettings = new TeacherSettings();
        if (this.getExtendedState() != 0) {
            teacherSettings.setExtendedState(JFrame.MAXIMIZED_BOTH);
        }
        teacherSettings.setVisible(true);

    }//GEN-LAST:event_btn_SettingActionPerformed

    private void btn_homeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_homeMouseEntered
        hoverInMouseMotion(btn_home);
    }//GEN-LAST:event_btn_homeMouseEntered

    private void btn_homeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_homeMouseExited
        defaultAfterHover(btn_home);
    }//GEN-LAST:event_btn_homeMouseExited

    private void btn_homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_homeActionPerformed
        this.setVisible(false);
        TeacherControl teacherControl = new TeacherControl();
        if (this.getExtendedState() != 0) {
            teacherControl.setExtendedState(JFrame.MAXIMIZED_BOTH);
        }
        teacherControl.setVisible(true);

    }//GEN-LAST:event_btn_homeActionPerformed

    private void btn_bestStudentStaticsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_bestStudentStaticsMouseEntered
        if (pl_theBest.isVisible() == false) {
            hoverInMouseMotion(btn_bestStudentStatics);
        }
    }//GEN-LAST:event_btn_bestStudentStaticsMouseEntered

    private void btn_bestStudentStaticsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_bestStudentStaticsMouseExited
        if (pl_theBest.isVisible() != true) {
            defaultAfterHover(btn_bestStudentStatics);
        }
    }//GEN-LAST:event_btn_bestStudentStaticsMouseExited

    private void btn_bestStudentStaticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_bestStudentStaticsActionPerformed
        pl_theBest.setVisible(true);
        pl_generalDashboard.setVisible(false);
        hoverInMouseClicked(btn_bestStudentStatics);
        defaultAfterHover(btn_generalDashboard);
    }//GEN-LAST:event_btn_bestStudentStaticsActionPerformed

    private void t_bestStudentStaticsReportMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_t_bestStudentStaticsReportMouseClicked

    }//GEN-LAST:event_t_bestStudentStaticsReportMouseClicked

    private void cb_level1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_level1ItemStateChanged
    }//GEN-LAST:event_cb_level1ItemStateChanged

    private void cb_level1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cb_level1FocusGained
        FocusLostOrGained(cb_level1);
    }//GEN-LAST:event_cb_level1FocusGained

    private void cb_level1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cb_level1FocusLost
        FocusLostOrGained(cb_level1);
    }//GEN-LAST:event_cb_level1FocusLost

    private void dc_endDate1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dc_endDate1FocusGained
        FocusLostOrGained(dc_endDate1);
    }//GEN-LAST:event_dc_endDate1FocusGained

    private void dc_endDate1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dc_endDate1FocusLost
        FocusLostOrGained(dc_endDate1);
    }//GEN-LAST:event_dc_endDate1FocusLost

    private void dc_startDate1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dc_startDate1FocusGained
        FocusLostOrGained(dc_startDate1);
    }//GEN-LAST:event_dc_startDate1FocusGained

    private void dc_startDate1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dc_startDate1FocusLost
        FocusLostOrGained(dc_startDate1);
    }//GEN-LAST:event_dc_startDate1FocusLost

    private void btn_viewStudentStaticsReportMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_viewStudentStaticsReportMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_viewStudentStaticsReportMouseEntered

    private void btn_viewStudentStaticsReportMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_viewStudentStaticsReportMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_viewStudentStaticsReportMouseExited

    private void btn_viewStudentStaticsReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_viewStudentStaticsReportActionPerformed
        if (checkEmpty(cb_level1) && checkEmpty(dc_startDate1) && checkEmpty(dc_endDate1)) {
            
            String level_name = cb_level1.getSelectedItem().toString();
            String first_date = ((JTextField) dc_startDate1.getDateEditor().getUiComponent()).getText();
            String second_date = ((JTextField) dc_endDate1.getDateEditor().getUiComponent()).getText();
            PreparedStatement preparedStatementForStudent, preparedStatementForClassNumber, preparedStatementForQuizNumber, preparedStatementForExamNumber;
            ResultSet resultSetForStudent, resultSetForTotal;
            DefaultTableModel dtm = new DefaultTableModel();
            NumberFormat twoPrecisionForm = new DecimalFormat("#0.00");
            int student_code = 0;
            String student_name = "";
            int count = 1;
            if (rb_attendance.isSelected()) {
                // get the total number of class
                try {
                    preparedStatementForStudent = con.prepareStatement("select count(class_number) from class where level_name=? and start_date between cast(? as date) and cast(? as date);");
                    preparedStatementForStudent.setString(1, level_name);
                    preparedStatementForStudent.setString(2, first_date);
                    preparedStatementForStudent.setString(3, second_date);
                    resultSetForStudent = preparedStatementForStudent.executeQuery();
                    while (resultSetForStudent.next()) {
                        count = resultSetForStudent.getInt(1);
                    }
                    tf_class_number.setText(String.valueOf(count));
                    tf_quiz_number.setText("");
                    tf_exam_number.setText("");
                    printDeterminationTable = 1;
                } catch (SQLException ex) {
                    handleSqlExceptions(ex.getErrorCode());
                }

                // get the most student attend to the class
                try {
                    preparedStatementForStudent = con.prepareStatement("select student_code,student_name,count(student_code) from student_class_connection where level_name=? and attendance_date between cast(? as date) and cast(? as date) and student_code in(select student_code from student where level_name=? and student_status!=?)  group by (student_code) order by count(student_code) desc");
                    preparedStatementForStudent.setString(1, level_name);
                    preparedStatementForStudent.setString(2, first_date);
                    preparedStatementForStudent.setString(3, second_date);
                    preparedStatementForStudent.setString(4, level_name);
                    preparedStatementForStudent.setString(5, "موقوف");

                    resultSetForStudent = preparedStatementForStudent.executeQuery();
                    dtm.addColumn("النسبة المؤية");
                    dtm.addColumn("عدد مرات الحضور");
                    dtm.addColumn("اسم الطالب");
                    dtm.addColumn("كود الطالب");
                    while (resultSetForStudent.next()) {
                        String r[] = {
                            "%" + String.valueOf(twoPrecisionForm.format((Double.parseDouble(resultSetForStudent.getString(3)) / count) * 100)),
                            resultSetForStudent.getString(3),
                            resultSetForStudent.getString(2),
                            resultSetForStudent.getString(1)
                        };
                        dtm.addRow(r);
                    }

                    preparedStatementForStudent = con.prepareStatement("select student_code,student_name from student where student_code not in(select student_code from student_class_connection where level_name=? and attendance_date between cast(? as date) and cast(? as date)) and level_name=? and student_status!=?");
                    preparedStatementForStudent.setString(1, level_name);
                    preparedStatementForStudent.setString(2, first_date);
                    preparedStatementForStudent.setString(3, second_date);
                    preparedStatementForStudent.setString(4, level_name);
                    preparedStatementForStudent.setString(5, "موقوف");
                    resultSetForStudent = preparedStatementForStudent.executeQuery();
                    while (resultSetForStudent.next()) {
                        String r[] = {
                            "%" + "0.00",
                            "0",
                            resultSetForStudent.getString(2),
                            resultSetForStudent.getString(1)
                        };
                        dtm.addRow(r);
                    }

                    t_bestStudentStaticsReport.setModel(dtm);

                } catch (SQLException ex) {
                    handleSqlExceptions(ex.getErrorCode());
                }
            } else if (rb_quiz.isSelected()) {
                // get the total number of class
                try {
                    preparedStatementForStudent = con.prepareStatement("select sum(quiz_degree) from quiz where level_name=? and quiz_date between cast(? as date) and cast(? as date);");
                    preparedStatementForStudent.setString(1, level_name);
                    preparedStatementForStudent.setString(2, first_date);
                    preparedStatementForStudent.setString(3, second_date);
                    resultSetForStudent = preparedStatementForStudent.executeQuery();
                    while (resultSetForStudent.next()) {
                        count = resultSetForStudent.getInt(1);
                    }
                    tf_class_number.setText("");
                    tf_quiz_number.setText(String.valueOf(count));
                    tf_exam_number.setText("");
                    printDeterminationTable = 2;
                } catch (SQLException ex) {
                    handleSqlExceptions(ex.getErrorCode());
                }

                // get the most student attend to the class
                try {
                    preparedStatementForStudent = con.prepareStatement("select student_code,student_name,sum(student_degree) from student_quiz_connection where level_name=? and date between cast(? as date) and cast(? as date) and student_code in(select student_code from student where level_name=? and student_status!=?) group by (student_code) order by sum(student_degree) desc");
                    preparedStatementForStudent.setString(1, level_name);
                    preparedStatementForStudent.setString(2, first_date);
                    preparedStatementForStudent.setString(3, second_date);
                    preparedStatementForStudent.setString(4, level_name);
                    preparedStatementForStudent.setString(5, "موقوف");
                    resultSetForStudent = preparedStatementForStudent.executeQuery();
                    dtm.addColumn("النسبة المؤية");
                    dtm.addColumn("الدرجات الكلية للطالب");
                    dtm.addColumn("اسم الطالب");
                    dtm.addColumn("كود الطالب");
                    while (resultSetForStudent.next()) {
                        String r[] = {
                            "%" + String.valueOf(twoPrecisionForm.format((Double.parseDouble(resultSetForStudent.getString(3)) / count) * 100)),
                            resultSetForStudent.getString(3),
                            resultSetForStudent.getString(2),
                            resultSetForStudent.getString(1)
                        };
                        dtm.addRow(r);
                    }

                    preparedStatementForStudent = con.prepareStatement("select student_code,student_name from student where student_code not in(select student_code from student_quiz_connection where level_name=? and date between cast(? as date) and cast(? as date)) and level_name=? and student_status!=?");
                    preparedStatementForStudent.setString(1, level_name);
                    preparedStatementForStudent.setString(2, first_date);
                    preparedStatementForStudent.setString(3, second_date);
                    preparedStatementForStudent.setString(4, level_name);
                    preparedStatementForStudent.setString(5, "موقوف");
                    resultSetForStudent = preparedStatementForStudent.executeQuery();
                    while (resultSetForStudent.next()) {
                        String r[] = {
                            "%" + "0.00",
                            "0",
                            resultSetForStudent.getString(2),
                            resultSetForStudent.getString(1)
                        };
                        dtm.addRow(r);
                    }
                    t_bestStudentStaticsReport.setModel(dtm);

                } catch (SQLException ex) {
                    handleSqlExceptions(ex.getErrorCode());
                }
            } else if (rb_exam.isSelected()) {
                // get the total number of class
                try {
                    preparedStatementForStudent = con.prepareStatement("select sum(exam_degree) from exam where level_name=? and exam_date between cast(? as date) and cast(? as date)");
                    preparedStatementForStudent.setString(1, level_name);
                    preparedStatementForStudent.setString(2, first_date);
                    preparedStatementForStudent.setString(3, second_date);
                    resultSetForStudent = preparedStatementForStudent.executeQuery();
                    while (resultSetForStudent.next()) {
                        count = resultSetForStudent.getInt(1);
                    }
                    tf_class_number.setText("");
                    tf_quiz_number.setText("");
                    tf_exam_number.setText(String.valueOf(count));
                    printDeterminationTable = 3;
                } catch (SQLException ex) {
                    handleSqlExceptions(ex.getErrorCode());
                }

                // get the most student attend to the class
                try {
                    preparedStatementForStudent = con.prepareStatement("select student_code,student_name,sum(student_degree) from student_exam_connection where level_name=? and date between cast(? as date) and cast(? as date) and student_code in(select student_code from student where level_name=? and student_status!=?) group by (student_code) order by sum(student_degree) desc");
                    preparedStatementForStudent.setString(1, level_name);
                    preparedStatementForStudent.setString(2, first_date);
                    preparedStatementForStudent.setString(3, second_date);
                    preparedStatementForStudent.setString(4, level_name);
                    preparedStatementForStudent.setString(5, "موقوف");
                    resultSetForStudent = preparedStatementForStudent.executeQuery();
                    dtm.addColumn("النسبة المؤية");
                    dtm.addColumn("الدرجات الكلية للطالب");
                    dtm.addColumn("اسم الطالب");
                    dtm.addColumn("كود الطالب");
                    while (resultSetForStudent.next()) {
                        String r[] = {
                            "%" + String.valueOf(twoPrecisionForm.format((Double.parseDouble(resultSetForStudent.getString(3)) / count) * 100)),
                            resultSetForStudent.getString(3),
                            resultSetForStudent.getString(2),
                            resultSetForStudent.getString(1)
                        };

                        dtm.addRow(r);
                    }
                    preparedStatementForStudent = con.prepareStatement("select student_code,student_name from student where student_code not in(select student_code from student_exam_connection where level_name=? and date between cast(? as date) and cast(? as date)) and level_name=? and student_status!=?");
                    preparedStatementForStudent.setString(1, level_name);
                    preparedStatementForStudent.setString(2, first_date);
                    preparedStatementForStudent.setString(3, second_date);
                    preparedStatementForStudent.setString(4, level_name);
                    preparedStatementForStudent.setString(5, "موقوف");
                    resultSetForStudent = preparedStatementForStudent.executeQuery();
                    while (resultSetForStudent.next()) {
                        String r[] = {
                            "%" + "0.00",
                            "0",
                            resultSetForStudent.getString(2),
                            resultSetForStudent.getString(1)
                        };
                        dtm.addRow(r);
                    }
                    t_bestStudentStaticsReport.setModel(dtm);

                } catch (SQLException ex) {
                    handleSqlExceptions(ex.getErrorCode());
                }
            } else if (rb_all.isSelected()) {
                this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                double classCount = 1.0;
                double quizCount = 1.0, examCount = 1.0;
                double classRatio = 1.0, quizRatio = 1.0, examRatio = 1.0;
                int studentAttendanceCount = 0;
                double studentQuizDegree = 0, studentExamsDegree = 0;
                // get the total number of all
                try {
                    preparedStatementForStudent = con.prepareStatement("select count(class_number) from class where level_name=? and start_date between cast(? as date) and cast(? as date);");
                    preparedStatementForStudent.setString(1, level_name);
                    preparedStatementForStudent.setString(2, first_date);
                    preparedStatementForStudent.setString(3, second_date);
                    resultSetForStudent = preparedStatementForStudent.executeQuery();

                    while (resultSetForStudent.next()) {
                        classCount = resultSetForStudent.getInt(1);
                    }
                } catch (SQLException ex) {
                    handleSqlExceptions(ex.getErrorCode());
                }

                try {
                    preparedStatementForStudent = con.prepareStatement("select sum(quiz_degree) from quiz where level_name=? and quiz_date between cast(? as date) and cast(? as date);");
                    preparedStatementForStudent.setString(1, level_name);
                    preparedStatementForStudent.setString(2, first_date);
                    preparedStatementForStudent.setString(3, second_date);
                    resultSetForStudent = preparedStatementForStudent.executeQuery();
                    while (resultSetForStudent.next()) {
                        quizCount = resultSetForStudent.getInt(1);
                    }

                } catch (SQLException ex) {
                    handleSqlExceptions(ex.getErrorCode());
                }

                try {
                    preparedStatementForStudent = con.prepareStatement("select COALESCE(sum(exam_degree),0) from exam where level_name=? and exam_date between cast(? as date) and cast(? as date)");
                    preparedStatementForStudent.setString(1, level_name);
                    preparedStatementForStudent.setString(2, first_date);
                    preparedStatementForStudent.setString(3, second_date);
                    resultSetForStudent = preparedStatementForStudent.executeQuery();
                    while (resultSetForStudent.next()) {
                        examCount = resultSetForStudent.getInt(1);
                    }

                } catch (SQLException ex) {
                    handleSqlExceptions(ex.getErrorCode());
                }

                // get the most student attend to the class
                try {
                    dtm.addColumn("النسبة الكلية");
                    dtm.addColumn("درجات الامتحانات ");
                    dtm.addColumn("درجات الطالب ");
                    dtm.addColumn("درجات التسميعات ");
                    dtm.addColumn("درجات الطالب ");
                    dtm.addColumn("النسبة المؤية للحضور");
                    dtm.addColumn("عدد مرات الحضور");
                    dtm.addColumn("اسم الطالب");
                    dtm.addColumn("كود الطالب");

                    preparedStatementForStudent = con.prepareStatement("select student_code,student_name from student where level_name=? and student_status !=? ");
                    preparedStatementForStudent.setString(1, level_name);
                    preparedStatementForStudent.setString(2, "موقوف");
                    resultSetForStudent = preparedStatementForStudent.executeQuery();

                    while (resultSetForStudent.next()) {
                        student_code = resultSetForStudent.getInt(1);
                        student_name = resultSetForStudent.getString(2);

                        // get the total number of student attendance
                        preparedStatementForClassNumber = con.prepareStatement("select count(student_code) from student_class_connection where student_code=? and level_name=? and attendance_date between cast(? as date) and cast(? as date)");
                        preparedStatementForClassNumber.setInt(1, student_code);
                        preparedStatementForClassNumber.setString(2, level_name);
                        preparedStatementForClassNumber.setString(3, first_date);
                        preparedStatementForClassNumber.setString(4, second_date);
                        resultSetForTotal = preparedStatementForClassNumber.executeQuery();

                        while (resultSetForTotal.next()) {
                            studentAttendanceCount = resultSetForTotal.getInt(1);
                            if (classCount == 0) {
                                classRatio = 0;
                            } else {
                                classRatio = (studentAttendanceCount / classCount) * 100;
                            }
                        }

                        // get the total number of student degree in quiz
                        preparedStatementForQuizNumber = con.prepareStatement("select COALESCE(sum(student_degree),0) from student_quiz_connection where student_code=? and level_name=? and date between cast(? as date) and cast(? as date)");
                        preparedStatementForQuizNumber.setInt(1, student_code);
                        preparedStatementForQuizNumber.setString(2, level_name);
                        preparedStatementForQuizNumber.setString(3, first_date);
                        preparedStatementForQuizNumber.setString(4, second_date);
                        resultSetForTotal = preparedStatementForQuizNumber.executeQuery();
                        while (resultSetForTotal.next()) {
                            studentQuizDegree = resultSetForTotal.getDouble(1);
                            if (quizCount == 0) {
                                quizRatio = 0;
                            } else {
                                quizRatio = (studentQuizDegree / quizCount) * 100;
                            }

                        }

                        // get the total number of student degree in quiz
                        preparedStatementForExamNumber = con.prepareStatement("select COALESCE(sum(student_degree),0) from student_exam_connection where student_code=? and  level_name=? and date between cast(? as date) and cast(? as date)");
                        preparedStatementForExamNumber.setInt(1, student_code);
                        preparedStatementForExamNumber.setString(2, level_name);
                        preparedStatementForExamNumber.setString(3, first_date);
                        preparedStatementForExamNumber.setString(4, second_date);
                        resultSetForTotal = preparedStatementForExamNumber.executeQuery();
                        while (resultSetForTotal.next()) {
                            studentExamsDegree = resultSetForTotal.getDouble(1);
                            if (examCount == 0) {
                                examRatio = 0;
                            } else {
                                examRatio = (studentExamsDegree / examCount) * 100;
                            }
                        }

                        // insert all the data to a temporary table in the database to use the sort of mysql inside it
                        preparedStatementForStudent = con.prepareStatement("insert into sortAll values(?,?,?,?,?,?,?,?,?)");
                        preparedStatementForStudent.setInt(1, (student_code));
                        preparedStatementForStudent.setString(2, student_name);
                        preparedStatementForStudent.setInt(3, studentAttendanceCount);
                        preparedStatementForStudent.setDouble(4, classRatio);
                        preparedStatementForStudent.setDouble(5, studentQuizDegree);
                        preparedStatementForStudent.setDouble(6, quizRatio);
                        preparedStatementForStudent.setDouble(7, studentExamsDegree);
                        preparedStatementForStudent.setDouble(8, examRatio);
                        preparedStatementForStudent.setDouble(9, ((examRatio + quizRatio + classRatio) / 3));
                        preparedStatementForStudent.execute();
                    }

                    // select the data in the sortall table and sort it depend on total ratio
                    preparedStatementForStudent = con.prepareStatement("select * from sortAll order by total_ratio desc");
                    resultSetForStudent = preparedStatementForStudent.executeQuery();
                    while (resultSetForStudent.next()) {
                        String r[] = {
                            "%" + String.valueOf(twoPrecisionForm.format(resultSetForStudent.getDouble(9))),
                            "%" + String.valueOf(twoPrecisionForm.format(resultSetForStudent.getDouble(8))),
                            String.valueOf(resultSetForStudent.getDouble(7)),
                            "%" + String.valueOf(twoPrecisionForm.format(resultSetForStudent.getDouble(6))),
                            String.valueOf(resultSetForStudent.getDouble(5)),
                            "%" + String.valueOf(twoPrecisionForm.format(resultSetForStudent.getDouble(4))),
                            String.valueOf(resultSetForStudent.getInt(3)),
                            resultSetForStudent.getString(2),
                            String.valueOf(resultSetForStudent.getInt(1))
                        };
                        dtm.addRow(r);
                    }
                    // delete the content of the table after have it sorted
                    preparedStatementForStudent = con.prepareStatement("delete from sortall");
                    preparedStatementForStudent.execute();

                    printDeterminationTable = 4;
                    tf_class_number.setText(String.valueOf((int) classCount));
                    tf_quiz_number.setText(String.valueOf(quizCount));
                    tf_exam_number.setText(String.valueOf(examCount));
                    t_bestStudentStaticsReport.setModel(dtm);
                    changeTheWidthOfTableColumn(t_bestStudentStaticsReport, 7);
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                } catch (SQLException ex) {
                    handleSqlExceptions(ex.getErrorCode());
                    System.out.println(ex);
                }
            } else {
                jOptionPaneMessage("الرجاء اختيار احد التصنيفات", 0);
            }
        }

    }//GEN-LAST:event_btn_viewStudentStaticsReportActionPerformed

    private void btn_printStudentStaticsReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_printStudentStaticsReportActionPerformed
        String title = "";
        String level = cb_level1.getSelectedItem().toString();
        String first_date = ((JTextField) dc_startDate1.getDateEditor().getUiComponent()).getText();
        String second_date = ((JTextField) dc_endDate1.getDateEditor().getUiComponent()).getText();

        switch (printDeterminationTable) {
            case -1:
                jOptionPaneMessage("لا يوجد بيانات لطباعتها الرجاء البحث عن الطالب", 0);
                break;
            case 1:
                title = " تقرير الحضور للصف" + "\"" + level + "\"" + "العدد الكلي للحصص" + "\"" + tf_class_number.getText() + "\"";
                break;
            case 2:
                title = "تقرير التسميعات للصف" + "\"" + level + "\"" + "الكلي" + "\"" + tf_quiz_number.getText() + "\"";
                break;
            case 3:
                title = "تقرير الامتحانات للصف" + "\"" + level + "\"" + "الكلي" + "\"" + tf_exam_number.getText() + "\"";
                break;
            case 4:
                title = " تقرير الكل للصف" + "\"" + level + "\"" + "من " + "\"" + first_date + "\"" + "الى" + "\"" + second_date + "\" ";
                break;

            default:
                break;
        }
        makeReport(t_bestStudentStaticsReport, title);
    }//GEN-LAST:event_btn_printStudentStaticsReportActionPerformed

    private void cb_level3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_level3ItemStateChanged
        // this data will be used in search and it's value will be changed depend on the query
        String level_name = cb_level3.getSelectedItem().toString();
        PreparedStatement st_totalCount;
        ResultSet res_totalCount;
        String totalCount = "0";
        try {
            // get the total number of classes in a level
            st_totalCount = con.prepareStatement("select count(class_number) from class where level_name=?");
            st_totalCount.setString(1, level_name);
            res_totalCount = st_totalCount.executeQuery();
            while (res_totalCount.next()) {
                totalCount = res_totalCount.getString(1);
            }
            lb_classValue.setText(totalCount);

            // get the total number of student in a level
            st_totalCount = con.prepareStatement("select count(student_code) from student where level_name=? and student_status!=?");
            st_totalCount.setString(1, level_name);
            st_totalCount.setString(2, "موقوف");
            res_totalCount = st_totalCount.executeQuery();
            while (res_totalCount.next()) {
                totalCount = res_totalCount.getString(1);
            }
            lb_studentValue.setText(totalCount);

            // get the total number of quiz in a level
            st_totalCount = con.prepareStatement("select count(quiz_code) from quiz where level_name=?");
            st_totalCount.setString(1, level_name);
            res_totalCount = st_totalCount.executeQuery();
            while (res_totalCount.next()) {
                totalCount = res_totalCount.getString(1);
            }
            lb_quizValue.setText(totalCount);

            // get the total number of exam in a level
            st_totalCount = con.prepareStatement("select count(exam_code) from exam where level_name=?");
            st_totalCount.setString(1, level_name);
            res_totalCount = st_totalCount.executeQuery();
            while (res_totalCount.next()) {
                totalCount = res_totalCount.getString(1);
            }
            lb_examValue.setText(totalCount);

            // get the total number of groups in a level
            st_totalCount = con.prepareStatement("select count(group_name) from student_group where level_name=?");
            st_totalCount.setString(1, level_name);
            res_totalCount = st_totalCount.executeQuery();
            while (res_totalCount.next()) {
                totalCount = res_totalCount.getString(1);
            }
            lb_groupValue.setText(totalCount);
        } catch (SQLException ex) {
            handleSqlExceptions(ex.getErrorCode());
        }
    }//GEN-LAST:event_cb_level3ItemStateChanged

    private void cb_level3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cb_level3FocusGained
        FocusLostOrGained(cb_level3);
    }//GEN-LAST:event_cb_level3FocusGained

    private void cb_level3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cb_level3FocusLost
        FocusLostOrGained(cb_level3);
    }//GEN-LAST:event_cb_level3FocusLost

    private void btn_generalDashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_generalDashboardActionPerformed

        pl_generalDashboard.setVisible(true);
        pl_theBest.setVisible(false);

        hoverInMouseClicked(btn_generalDashboard);
        defaultAfterHover(btn_bestStudentStatics);
    }//GEN-LAST:event_btn_generalDashboardActionPerformed

    private void btn_generalDashboardMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_generalDashboardMouseExited
        if (pl_generalDashboard.isVisible() != true) {
            defaultAfterHover(btn_generalDashboard);
        }
    }//GEN-LAST:event_btn_generalDashboardMouseExited

    private void btn_generalDashboardMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_generalDashboardMouseEntered
        if (pl_generalDashboard.isVisible() == false) {
            hoverInMouseMotion(btn_generalDashboard);
        }
    }//GEN-LAST:event_btn_generalDashboardMouseEntered

    private void cb_level3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_level3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_level3ActionPerformed

    private void rb_allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_allActionPerformed

    }//GEN-LAST:event_rb_allActionPerformed

    private void rb_quizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_quizActionPerformed

    }//GEN-LAST:event_rb_quizActionPerformed

    private void rb_examActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_examActionPerformed

    }//GEN-LAST:event_rb_examActionPerformed

    private void rb_attendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_attendanceActionPerformed

    }//GEN-LAST:event_rb_attendanceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TeacherDashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TeacherDashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TeacherDashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TeacherDashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TeacherDashBoard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Setting;
    private javax.swing.JButton btn_bestStudentStatics;
    private javax.swing.JButton btn_generalDashboard;
    private javax.swing.JButton btn_home;
    private javax.swing.JButton btn_printStudentStaticsReport;
    private javax.swing.JButton btn_viewStudentStaticsReport;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cb_level1;
    private javax.swing.JComboBox<String> cb_level3;
    private com.toedter.calendar.JDateChooser dc_endDate1;
    private com.toedter.calendar.JDateChooser dc_startDate1;
    private javax.swing.JLabel lb_apsenceNumber1;
    private javax.swing.JLabel lb_attendanceNumber1;
    private javax.swing.JLabel lb_chooseDate1;
    private javax.swing.JLabel lb_class;
    private javax.swing.JLabel lb_classValue;
    private javax.swing.JLabel lb_empty3;
    private javax.swing.JLabel lb_empty4;
    private javax.swing.JLabel lb_empty5;
    private javax.swing.JLabel lb_endDate1;
    private javax.swing.JLabel lb_exam;
    private javax.swing.JLabel lb_examValue;
    private javax.swing.JLabel lb_group;
    private javax.swing.JLabel lb_groupValue;
    private javax.swing.JLabel lb_levelName2;
    private javax.swing.JLabel lb_levelName4;
    private javax.swing.JLabel lb_quiz;
    private javax.swing.JLabel lb_quizValue;
    private javax.swing.JLabel lb_star15;
    private javax.swing.JLabel lb_startDate1;
    private javax.swing.JLabel lb_student;
    private javax.swing.JLabel lb_studentValue;
    private javax.swing.JLabel lb_total1;
    private javax.swing.JLabel lp_empty1;
    private javax.swing.JLabel lp_empty2;
    private javax.swing.JLabel lp_empty3;
    private javax.swing.JPanel pl_background;
    private javax.swing.JPanel pl_bottomButtonCotrol;
    private javax.swing.JPanel pl_classes;
    private javax.swing.JPanel pl_generalDashboard;
    private javax.swing.JPanel pl_leftData;
    private javax.swing.JPanel pl_level;
    private javax.swing.JPanel pl_levelName;
    private javax.swing.JPanel pl_rightData;
    private javax.swing.JPanel pl_seperateLine2;
    private javax.swing.JPanel pl_theBest;
    private javax.swing.JPanel pl_topButtonControl;
    private javax.swing.JPanel pl_totalValues;
    private javax.swing.JPanel pl_verticalSeperatePanel1;
    private javax.swing.JRadioButton rb_all;
    private javax.swing.JRadioButton rb_attendance;
    private javax.swing.JRadioButton rb_exam;
    private javax.swing.JRadioButton rb_quiz;
    private javax.swing.JLayeredPane reports;
    private javax.swing.JScrollPane sp_bestStudentStaticsReport;
    private javax.swing.JScrollPane sp_reports;
    private javax.swing.JTable t_bestStudentStaticsReport;
    private javax.swing.JTextField tf_class_number;
    private javax.swing.JTextField tf_exam_number;
    private javax.swing.JTextField tf_quiz_number;
    // End of variables declaration//GEN-END:variables

}
